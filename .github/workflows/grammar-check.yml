name: "Grammar & Punctuation Check (RU) with Markdown Conversion"

on:
  pull_request:
    paths:
      - '00_Правила_оформления/**/*.md'
      - '01_Вселенная/**/*.md'
      - '02_Станция/**/*.md'
      - '03_Государства/**/*.md'
      - '04_Корпорации/**/*.md'
      - '05_Организации/**/*.md'
      - '06_Расы/**/*.md'
      - '07_Существа/**/*.md'
      - '08_Технологии/**/*.md'
      - '09_Вооружение/**/*.md'
      - '10_Явления/**/*.md'
      - '11_Товары/**/*.md'
      - '12_Другое/**/*.md'
      - '13_Истории/**/*.md'
      - '14_Повседневность/**/*.md'
      - 'README.md'
      - 'LICENSE.md'

jobs:
  grammar-check:
    runs-on: ubuntu-latest

    steps:
      # 1. Клонируем репозиторий
      - name: Check out the code
        uses: actions/checkout@v3

      # 2. Устанавливаем Java (LanguageTool требует Java)
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # 3. Устанавливаем Pandoc (преобразование MD -> Plain Text)
      - name: Install Pandoc
        run: |
          sudo apt-get update
          sudo apt-get install -y pandoc

      # 4. Скачиваем LanguageTool (версию можно обновлять при необходимости)
      - name: Download LanguageTool
        run: |
          wget https://languagetool.org/download/LanguageTool-6.0.zip -O lt.zip
          unzip lt.zip -d lt

      # 5. Убедимся, что словарь уже есть в репо: .github/languagetool/custom_dict.txt
      - name: Check custom dictionary
        run: |
          if [ ! -f ".github/languagetool/custom_dict.txt" ]; then
            echo "Файл .github/languagetool/custom_dict.txt не найден!"
            exit 1
          fi

      # 6. Запускаем LanguageTool на изменённых .md-файлах, предварительно "чистя" их от Markdown
      - name: Run grammar check (RU) with Pandoc
        id: run_languagetool
        run: |
          # Список .md-файлов, изменённых в этом PR (против базовой ветки)
          CHANGED_FILES=$(git diff --name-only --diff-filter=ACMRT origin/${{ github.base_ref }} | grep '\.md$' || true)

          if [ -z "$CHANGED_FILES" ]; then
            echo "No changed .md files to check."
            # создадим пустой вывод, чтобы следующий шаг мог это учесть
            echo "" > grammar_output.txt
            exit 0
          fi

          echo "Changed markdown files:"
          echo "$CHANGED_FILES"

          # Очищаем/создаём общий файл с результатами
          rm -f grammar_output.txt
          touch grammar_output.txt

          for FILE in $CHANGED_FILES; do
            echo "--------------------------------" >> grammar_output.txt
            echo "Проверка файла: $FILE" >> grammar_output.txt
            echo "" >> grammar_output.txt

            # 1) Конвертируем из MD в обычный текст
            pandoc "$FILE" -t plain -o /tmp/conversion.txt

            # 2) Запускаем LanguageTool на тексте
            #    --language ru + наш пользовательский словарь
            java -jar lt/LanguageTool-6.0/languagetool-commandline.jar \
              --language ru \
              --motherTongue ru \
              --userDictionary .github/languagetool/custom_dict.txt \
              /tmp/conversion.txt \
              >> grammar_output.txt \
              || true

            echo "" >> grammar_output.txt
          done

      # 7. Оставляем комментарий в PR с результатами
      - name: Create PR comment with suggestions
        if: always()   # Выполнить даже в случае, если предыдущий шаг вернёт "ошибки"
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const path = 'grammar_output.txt';

            if (!fs.existsSync(path)) {
              core.setOutput('No grammar output file found.');
              return;
            }
            const suggestions = fs.readFileSync(path, 'utf8');

            if (!suggestions.trim()) {
              core.setOutput('No grammar issues found.');
              return;
            }

            // Ограничение на размер комментария (в символах)
            const maxLength = 60000;
            let trimmed = suggestions;
            if (trimmed.length > maxLength) {
              trimmed = trimmed.substring(0, maxLength) + "\n\n[...ВЫВОД ОТРЕЗАН ПОСЛЕ 60К СИМВОЛОВ...]";
            }

            const body = `## LanguageTool (RU) — Проверка грамматики (Markdown очищен)\n\n\`\`\`\n${trimmed}\n\`\`\``;

            // Создаём комментарий в PR
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });
